{"version":3,"file":"zip-ex.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip-ex.ts"],"names":[],"mappings":";;;AAOA,gCAAgC;AAChC,yBAAyB;AACzB,6BAA6B;AAE7B,+BAAoD;AAKpD,MAAM,KAAK,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAE5C,MAAa,WAAY,SAAQ,SAAG;IAMhC,YAA6B,OAAe;QACxC,KAAK,EAAE,CAAC;QADiB,YAAO,GAAP,OAAO,CAAQ;IAE5C,CAAC;IANM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,OAAe;QAC3C,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;IACrD,CAAC;IAMM,WAAW;QACd,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAEM,YAAY;QACf,OAAO,CAAC,CAAC;IACb,CAAC;IAEM,UAAU;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,QAAQ,CAAC,SAAiB;QAC7B,OAAO,IAAI,CAAC,UAAU,EAAE;eACjB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEM,KAAK,CAAC,UAAU;QAEnB,OAAO,IAAI,OAAO,CAAW,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE;YAEpD,MAAM,iBAAiB,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAQxD,MAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;gBAC/D,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE;gBACpB,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAE5F,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,kBAAkB,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAEjD,IAAI,gBAAgB,GAAG,kBAAkB,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;gBACzE,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBAGxB,IAAI,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACrC,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBACjD;gBAED,OAAO,gBAAgB,CAAC;YAC5B,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,aAAa,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,SAAiB;QAI7C,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YACjD,OAAO,OAAO,CAAC,MAAM,CAAC,gCAAgC,GAAG,SAAS,CAAC,CAAC;SACvE;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACpD,MAAM,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAErC,MAAM,eAAe,GAAqB;YACtC,MAAM,EAAE,KAAK,CAAC,IAAI;YAClB,KAAK,EAAE,KAAK,IAAI,EAAE;gBACd,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAC9C,CAAC;YACD,MAAM,EAAE,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;SAC9D,CAAC;QAEF,OAAO,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAC5C,CAAC;CACJ;AAjFD,kCAiFC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\n\n// import * as filehound from \"filehound\";\n// import { bufferToStream } from \"../stream/BufferUtils\";\n\nconst debug = debug_(\"r2:utils#zip/zip-ex\");\n\nexport class ZipExploded extends Zip {\n\n    public static async loadPromise(dirPath: string): Promise<IZip> {\n        return Promise.resolve(new ZipExploded(dirPath));\n    }\n\n    private constructor(readonly dirPath: string) {\n        super();\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: ZipExploded -- \" + this.dirPath);\n    }\n\n    public entriesCount(): number {\n        return 0; // TODO: hacky! (not really needed ... but still)\n    }\n\n    public hasEntries(): boolean {\n        return true; // TODO: hacky\n    }\n\n    public hasEntry(entryPath: string): boolean {\n        return this.hasEntries()\n            && fs.existsSync(path.join(this.dirPath, entryPath));\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        return new Promise<string[]>(async (resolve, _reject) => {\n\n            const dirPathNormalized = fs.realpathSync(this.dirPath);\n\n            // const files: string[] = await filehound.create()\n            //     // .discard(\"node_modules\")\n            //     // .depth(5)\n            //     .paths(this.dirPath)\n            //     // .ext([\".epub\", \".epub3\", \".cbz\"])\n            //     .find();\n            const files = fs.readdirSync(this.dirPath, { withFileTypes: true }).\n                filter((f) => f.isFile() &&\n                    /\\.(epub3?)|(zip)|(cbz)$/.test(f.name)).map((f) => path.join(this.dirPath, f.name));\n\n            const adjustedFiles = files.map((file) => {\n                const filePathNormalized = fs.realpathSync(file);\n\n                let relativeFilePath = filePathNormalized.replace(dirPathNormalized, \"\");\n                debug(relativeFilePath);\n\n                // TODO: is this necessary?\n                if (relativeFilePath.indexOf(\"/\") === 0) {\n                    relativeFilePath = relativeFilePath.substr(1);\n                }\n\n                return relativeFilePath;\n            });\n            resolve(adjustedFiles);\n        });\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            return Promise.reject(\"no such path in zip exploded: \" + entryPath);\n        }\n\n        const fullPath = path.join(this.dirPath, entryPath);\n        const stats = fs.lstatSync(fullPath);\n\n        const streamAndLength: IStreamAndLength = {\n            length: stats.size,\n            reset: async () => {\n                return this.entryStreamPromise(entryPath);\n            },\n            stream: fs.createReadStream(fullPath, { autoClose: false }),\n        };\n\n        return Promise.resolve(streamAndLength);\n    }\n}\n"]}