{"version":3,"file":"zip2RandomAccessReader_Http.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip2RandomAccessReader_Http.ts"],"names":[],"mappings":"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","sourcesContent":["import { PassThrough } from \"stream\";\nimport * as util from \"util\";\n\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport * as yauzl from \"yauzl\";\n\nimport { bufferToStream, streamToBufferPromise } from \"../stream/BufferUtils\";\n\n// import { HttpReadableStream } from \"./HttpReadableStream\";\n\nconst debug = debug_(\"r2:httpStream\");\n\nexport interface RandomAccessReader {\n    _readStreamForRange(start: number, end: number): void;\n}\nexport class HttpZipReader implements RandomAccessReader {\n\n    private firstBuffer: Buffer | undefined = undefined;\n    private firstBufferStart: number = 0;\n    private firstBufferEnd: number = 0;\n\n    constructor(readonly url: string, readonly byteLength: number) {\n        yauzl.RandomAccessReader.call(this);\n    }\n\n    public _readStreamForRange(start: number, end: number) {\n        // const length = end - start;\n        // debug(`_readStreamForRange (new HttpReadableStream) ${this.url}` +\n        //     ` content-length=${this.byteLength} start=${start} end+1=${end} (length=${length})`);\n\n        // return new HttpReadableStream(this.url, this.byteLength, start, end);\n        // =>\n\n        // const length = end - start;\n        // debug(`_read: ${size} (${this.url}` +\n        //     ` content-length=${this.byteLength} start=${this.start} end+1=${this.end} (length=${length}))`);\n        // debug(`alreadyRead: ${this.alreadyRead} (byteLength: ${length})`);\n\n        if (this.firstBuffer && start >= this.firstBufferStart && end <= this.firstBufferEnd) {\n\n            // console.log(`HTTP CACHE ${this.url}: ${start}-${end} (${length}) [${this.byteLength}]`);\n\n            const begin = start - this.firstBufferStart;\n            const stop = end - this.firstBufferStart;\n\n            return bufferToStream(this.firstBuffer.slice(begin, stop));\n        }\n\n        const stream = new PassThrough();\n\n        const lastByteIndex = end - 1;\n        const range = `${start}-${lastByteIndex}`;\n\n        // console.log(`HTTP GET ${this.url}: ${start}-${end} (${length}) [${this.byteLength}]`);\n\n        const failure = (err: any) => {\n            debug(err);\n            // this.stream.end();\n        };\n\n        const success = async (res: request.RequestResponse) => {\n            if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {\n                failure(\"HTTP CODE \" + res.statusCode);\n                return;\n            }\n\n            // debug(res);\n\n            // debug(res.headers);\n            // debug(res.headers[\"content-type\"]);\n            // debug(`HTTP response content-range: ${res.headers[\"content-range\"]}`);\n            // debug(`HTTP response content-length: ${res.headers[\"content-length\"]}`);\n\n            if (this.firstBuffer) {\n                res.pipe(stream);\n                // // .on(\"end\", () => {\n                // //     debug(\"END\");\n                // // });\n            } else {\n                let buffer: Buffer;\n                try {\n                    buffer = await streamToBufferPromise(res);\n                } catch (err) {\n                    debug(err);\n                    stream.end();\n                    return;\n                }\n                // debug(`streamToBufferPromise: ${buffer.length}`);\n\n                this.firstBuffer = buffer;\n                this.firstBufferStart = start;\n                this.firstBufferEnd = end;\n\n                stream.write(buffer);\n                stream.end();\n            }\n        };\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n        if (needsStreamingResponse) {\n            request.get({\n                headers: { Range: `bytes=${range}` },\n                method: \"GET\",\n                uri: this.url,\n            })\n                .on(\"response\", success)\n                .on(\"error\", failure);\n        } else {\n            // tslint:disable-next-line:no-floating-promises\n            (async () => {\n                let res: requestPromise.FullResponse;\n                try {\n                    // tslint:disable-next-line:await-promise no-floating-promises\n                    res = await requestPromise({\n                        headers: { Range: `bytes=${range}` },\n                        method: \"GET\",\n                        resolveWithFullResponse: true,\n                        uri: this.url,\n                    });\n                } catch (err) {\n                    failure(err);\n                    return;\n                }\n\n                await success(res);\n            })()\n                // .then(() => {\n                //     console.log(\"done\");\n                // }).catch((err) => {\n                //     console.log(err);\n                // })\n                ;\n        }\n\n        return stream;\n    }\n}\nutil.inherits(HttpZipReader, yauzl.RandomAccessReader);\n\n// // tslint:disable-next-line:space-before-function-paren\n// HttpZipReader.prototype._readStreamForRange = function (start: number, end: number) {\n\n// };\n"]}