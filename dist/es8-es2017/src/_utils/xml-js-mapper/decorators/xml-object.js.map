{"version":3,"file":"xml-object.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/decorators/xml-object.ts"],"names":[],"mappings":";;AAAA,oEAA6D;AAG7D,mBAA0B,UAA2B;IACjD,MAAM,CAAC,CAAC,UAAwB,EAAQ,EAAE;QAItC,MAAM,GAAG,GAAG,iCAAa,CAAC,UAAU,CAAC,CAAC;QAEtC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC;QAEhC,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YACnC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC/B,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;oBACjB,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;wBAChC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACtC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gCACnD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;oCACtB,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC;gCAC5B,CAAC;gCACD,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;4BACpD,CAAC;wBACL,CAAC;oBACL,CAAC;oBACD,EAAE,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;wBAC9B,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;4BACvC,EAAE,CAAC,CAAC,EAAE,CAAC,eAAe,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;gCACzC,EAAE,CAAC,YAAY,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;oCAClC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;oCACxC,SAAS,CAAC;4BAElB,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;IAML,CAAC,CAAC;AACN,CAAC;AA3CD,8BA2CC","sourcesContent":["import { getDefinition } from \"../classes/object-definition\";\nimport { FunctionType, IXmlNamespaces } from \"../types\";\n\nexport function XmlObject(namespaces?: IXmlNamespaces) {\n    return (objectType: FunctionType): void => {\n\n        // console.log(\"########################## XmlObject NS\");\n        // console.log(objectType);\n        const def = getDefinition(objectType);\n        // console.log(def);\n        if (namespaces) {\n            def.namespaces = namespaces;\n            // console.log(namespaces);\n        }\n        if (def.namespaces && def.properties) {\n            def.properties.forEach((propDef) => {\n                if (def.namespaces) { // redundant ... TypeScript compile check :(\n                    for (const prop in def.namespaces) {\n                        if (def.namespaces.hasOwnProperty(prop)) {\n                            if (!propDef.namespaces || !propDef.namespaces[prop]) {\n                                if (!propDef.namespaces) {\n                                    propDef.namespaces = {};\n                                }\n                                propDef.namespaces[prop] = def.namespaces[prop];\n                            }\n                        }\n                    }\n                    if (propDef.xpathSelectorParsed) {\n                        propDef.xpathSelectorParsed.forEach((xp) => {\n                            if (xp.namespacePrefix && !xp.namespaceUri) {\n                                xp.namespaceUri = propDef.namespaces ?\n                                    propDef.namespaces[xp.namespacePrefix] :\n                                    undefined;\n                                // console.log(\"+++ \" + xp.namespaceUri);\n                            }\n                        });\n                    }\n                }\n            });\n        }\n        // if (def.properties) {\n        //     def.properties.forEach((propDef) => {\n        //         console.log(propDef.xpathSelectorParsed);\n        //     });\n        // }\n    };\n}\n"]}