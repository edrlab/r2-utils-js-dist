{"version":3,"file":"HttpReadableStream.js","sourceRoot":"","sources":["../../../../../src/_utils/http/HttpReadableStream.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable } from \"stream\";\n\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\n\n/////////////\n/////////////\n/////////////\n///////////// THIS IS UNUSED CODE!\n/////////////\n/////////////\n/////////////\n\nconst debug = debug_(\"r2:httpStream\");\n\nexport class HttpReadableStream extends Readable {\n\n    private alreadyRead = 0;\n\n    constructor(\n        readonly url: string,\n        readonly byteLength: number,\n        readonly byteStart: number,\n        readonly byteEnd: number) {\n        super();\n    }\n\n    public _read(_size: number) {\n\n        const length = this.byteEnd - this.byteStart;\n        // debug(`_read: ${size} (${this.url}` +\n        //     ` content-length=${this.byteLength} start=${this.start} end+1=${this.end} (length=${length}))`);\n        // debug(`alreadyRead: ${this.alreadyRead} (byteLength: ${length})`);\n        if (this.alreadyRead >= length) {\n            // debug(\"this.alreadyRead >= this.byteLength\");\n            this.push(null);\n            return;\n        }\n\n        const failure = (err: any) => {\n            debug(err);\n            this.push(null);\n        };\n\n        const success = async (res: request.RequestResponse) => {\n            if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {\n                failure(\"HTTP CODE \" + res.statusCode);\n                return;\n            }\n\n            // debug(res.headers);\n            // debug(res.headers[\"content-type\"]);\n            // debug(`HTTP response content-range: ${res.headers[\"content-range\"]}`);\n            // debug(`HTTP response content-length: ${res.headers[\"content-length\"]}`);\n\n            let buffer: Buffer;\n            try {\n                buffer = await streamToBufferPromise(res);\n            } catch (err) {\n                failure(err);\n                return;\n            }\n\n            // debug(`streamToBufferPromise: ${buffer.length}`);\n            this.alreadyRead += buffer.length;\n            this.push(buffer);\n        };\n\n        console.log(`HTTP GET ${this.url}: ${this.byteStart}-${this.byteEnd} (${this.byteEnd - this.byteStart})`);\n\n        const lastByteIndex = this.byteEnd - 1;\n        const range = `${this.byteStart}-${lastByteIndex}`;\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n        if (needsStreamingResponse) {\n            request.get({\n                headers: { Range: `bytes=${range}` },\n                method: \"GET\",\n                uri: this.url,\n            })\n                .on(\"response\", success)\n                .on(\"error\", failure);\n        } else {\n            (async () => {\n                let res: requestPromise.FullResponse;\n                try {\n                    // tslint:disable-next-line:await-promise no-floating-promises\n                    res = await requestPromise({\n                        headers: { Range: `bytes=${range}` },\n                        method: \"GET\",\n                        resolveWithFullResponse: true,\n                        uri: this.url,\n                    });\n                } catch (err) {\n                    failure(err);\n                    return;\n                }\n\n                await success(res);\n            })();\n        }\n    }\n}\n"]}