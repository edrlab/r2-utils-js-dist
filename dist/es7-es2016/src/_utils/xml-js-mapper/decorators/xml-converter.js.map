{"version":3,"file":"xml-converter.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/decorators/xml-converter.ts"],"names":[],"mappings":";;AAAA,oEAA6D;AAI7D,sBAA6B,SAA6E;IACtG,MAAM,CAAC,CAAC,MAAW,EAAE,GAAW,EAAQ,EAAE;QACtC,MAAM,QAAQ,GAAG,iCAAa,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAEpE,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC;YAClC,QAAQ,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;QACnC,CAAC;IACL,CAAC,CAAC;AACN,CAAC;AAVD,oCAUC","sourcesContent":["import { getDefinition } from \"../classes/object-definition\";\nimport { IPropertyConverter } from \"../converters/converter\";\nimport { IParameterlessConstructor } from \"../types\";\n\nexport function XmlConverter(converter: IPropertyConverter | IParameterlessConstructor<IPropertyConverter>) {\n    return (target: any, key: string): void => {\n        const property = getDefinition(target.constructor).getProperty(key);\n\n        if (typeof converter === \"function\") {\n            property.converter = new converter();\n        } else {\n            property.converter = converter;\n        }\n    };\n}\n"]}