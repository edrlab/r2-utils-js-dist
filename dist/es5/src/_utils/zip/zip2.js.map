{"version":3,"file":"zip2.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip2.ts"],"names":[],"mappings":";;;AAAA,8BAAgC;AAChC,iCAAmC;AACnC,uDAAyD;AACzD,6BAA+B;AAE/B,6CAA0C;AAC1C,qDAA8D;AAC9D,6BAAoD;AACpD,6EAA8D;AAE9D,IAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;AAIhC;IAA0B,gCAAG;IAkQzB,cAA6B,QAAgB,EAAW,GAAQ;QAAhE,YACI,iBAAO,SAIV;QAL4B,cAAQ,GAAR,QAAQ,CAAQ;QAAW,SAAG,GAAH,GAAG,CAAK;QAI5D,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;;IACtB,CAAC;IArQmB,gBAAW,GAA/B,UAAgC,QAAgB;;;gBAC5C,EAAE,CAAC,CAAC,iBAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACnB,MAAM,KAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAC;gBAC1C,CAAC;gBAED,WAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;wBAErC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,UAAC,GAAQ,EAAE,GAAQ;4BAC7E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,KAAK,CAAC,kBAAkB,CAAC,CAAC;gCAC1B,KAAK,CAAC,GAAG,CAAC,CAAC;gCACX,MAAM,CAAC,GAAG,CAAC,CAAC;gCACZ,MAAM,CAAC;4BACX,CAAC;4BACD,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;4BAErC,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,IAAS;gCACtB,KAAK,CAAC,aAAa,CAAC,CAAC;gCACrB,KAAK,CAAC,IAAI,CAAC,CAAC;gCACZ,MAAM,CAAC,IAAI,CAAC,CAAC;4BACjB,CAAC,CAAC,CAAC;4BAEH,GAAG,CAAC,SAAS,EAAE,CAAC;4BAChB,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAU;gCAEvB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gCAExD,CAAC;gCAAC,IAAI,CAAC,CAAC;oCAEJ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gCACzB,CAAC;gCACD,GAAG,CAAC,SAAS,EAAE,CAAC;4BACpB,CAAC,CAAC,CAAC;4BAEH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE;gCACV,KAAK,CAAC,WAAW,CAAC,CAAC;gCACnB,OAAO,CAAC,IAAI,CAAC,CAAC;4BAClB,CAAC,CAAC,CAAC;4BAEH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE;gCACZ,KAAK,CAAC,aAAa,CAAC,CAAC;4BACzB,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,EAAC;;;KACN;IAEoB,oBAAe,GAApC,UAAqC,QAAgB;;;;;gBAI3C,sBAAsB,GAAG,IAAI,CAAC;gBAEpC,WAAO,IAAI,OAAO,CAAO,UAAO,OAAO,EAAE,MAAM;;;;;;oCAErC,OAAO,GAAG,UAAC,GAAQ;wCACrB,KAAK,CAAC,GAAG,CAAC,CAAC;wCACX,MAAM,CAAC,GAAG,CAAC,CAAC;oCAChB,CAAC,CAAC;oCAEI,OAAO,GAAG,UAAO,GAA4B;;;;;;oDAC/C,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;wDACpE,OAAO,CAAC,YAAY,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC;wDACvC,MAAM,KAAC;oDACX,CAAC;oDAED,KAAK,CAAC,QAAQ,CAAC,CAAC;oDAChB,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oDAWnB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;wDACjC,MAAM,CAAC,+BAA+B,CAAC,CAAC;wDACxC,MAAM,KAAC;oDACX,CAAC;oDACK,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAW,EAAE,EAAE,CAAC,CAAC;oDAChF,KAAK,CAAC,qBAAmB,iBAAmB,CAAC,CAAC;yDAE1C,CAAA,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC;2DAC1B,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,OAAO,CAAA,EAD3C,cAC2C;oDAC3C,EAAE,CAAC,CAAC,iBAAiB,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;wDACxC,MAAM,CAAC,yDAAyD,GAAG,iBAAiB,CAAC,CAAC;wDACtF,MAAM,KAAC;oDACX,CAAC;oDACD,KAAK,CAAC,eAAe,GAAG,QAAQ,CAAC,CAAC;oDAE5B,YAAW,UAAC,GAAQ;wDAEtB,KAAK,CAAC,GAAG,CAAC,CAAC;wDACX,MAAM,CAAC,GAAG,CAAC,CAAC;oDAChB,CAAC,CAAC;oDAEI,QAAQ,GAAG,UAAO,IAA6B;;;;;oEACjD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,GAAG,IAAI,IAAI,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;wEACvE,SAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;wEACzC,MAAM,KAAC;oEACX,CAAC;;;;oEAMY,WAAM,mCAAqB,CAAC,IAAI,CAAC,EAAA;;oEAA1C,MAAM,GAAG,SAAiC,CAAC;;;;oEAE3C,KAAK,CAAC,KAAG,CAAC,CAAC;oEACX,MAAM,CAAC,KAAG,CAAC,CAAC;oEACZ,WAAO;;oEAGX,KAAK,CAAC,UAAU,CAAC,MAAM,EACnB,EAAE,WAAW,EAAE,IAAI,EAAE,EACrB,UAAC,GAAQ,EAAE,GAAQ;wEACf,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4EACN,KAAK,CAAC,kBAAkB,CAAC,CAAC;4EAC1B,KAAK,CAAC,GAAG,CAAC,CAAC;4EACX,MAAM,CAAC,GAAG,CAAC,CAAC;4EACZ,MAAM,CAAC;wEACX,CAAC;wEACD,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;wEAErC,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,IAAS;4EACtB,KAAK,CAAC,aAAa,CAAC,CAAC;4EACrB,KAAK,CAAC,IAAI,CAAC,CAAC;4EACZ,MAAM,CAAC,IAAI,CAAC,CAAC;wEACjB,CAAC,CAAC,CAAC;wEAEH,GAAG,CAAC,SAAS,EAAE,CAAC;wEAChB,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAU;4EACvB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;4EAExD,CAAC;4EAAC,IAAI,CAAC,CAAC;gFAEJ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4EACzB,CAAC;4EACD,GAAG,CAAC,SAAS,EAAE,CAAC;wEACpB,CAAC,CAAC,CAAC;wEAEH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE;4EACV,KAAK,CAAC,WAAW,CAAC,CAAC;4EACnB,OAAO,CAAC,IAAI,CAAC,CAAC;wEAClB,CAAC,CAAC,CAAC;wEAEH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE;4EACZ,KAAK,CAAC,aAAa,CAAC,CAAC;wEACzB,CAAC,CAAC,CAAC;oEACP,CAAC,CAAC,CAAC;;;;yDACV,CAAC;yDAEE,sBAAsB,EAAtB,cAAsB;oDACtB,OAAO,CAAC,GAAG,CAAC;wDACR,OAAO,EAAE,EAAE;wDACX,MAAM,EAAE,KAAK;wDACb,GAAG,EAAE,QAAQ;qDAChB,CAAC;yDACG,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;yDACxB,EAAE,CAAC,OAAO,EAAE,SAAQ,CAAC,CAAC;;;oDAEvB,IAAI,SAA6B,CAAC;;;;oDAG3B,WAAM,cAAc,CAAC;4DACxB,OAAO,EAAE,EAAE;4DACX,MAAM,EAAE,KAAK;4DACb,uBAAuB,EAAE,IAAI;4DAC7B,GAAG,EAAE,QAAQ;yDAChB,CAAC,EAAA;;oDALF,IAAI,GAAG,SAKL,CAAC;;;;oDAEH,SAAQ,CAAC,KAAG,CAAC,CAAC;oDACd,WAAO;wDAGX,WAAM,QAAQ,CAAC,IAAI,CAAC,EAAA;;oDAApB,SAAoB,CAAC;;wDAGzB,WAAO;;oDAGL,aAAa,GAAG,IAAI,2CAAa,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;oDACrE,KAAK,CAAC,sBAAsB,CAAC,aAAa,EAAE,iBAAiB,EACzD,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,EACvC,UAAC,GAAQ,EAAE,GAAQ;wDACf,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4DACN,KAAK,CAAC,kBAAkB,CAAC,CAAC;4DAC1B,KAAK,CAAC,GAAG,CAAC,CAAC;4DACX,MAAM,CAAC,GAAG,CAAC,CAAC;4DACZ,MAAM,CAAC;wDACX,CAAC;wDACD,GAAG,CAAC,aAAa,GAAG,aAAa,CAAC;wDAClC,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;wDAErC,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,IAAS;4DACtB,KAAK,CAAC,aAAa,CAAC,CAAC;4DACrB,KAAK,CAAC,IAAI,CAAC,CAAC;4DACZ,MAAM,CAAC,IAAI,CAAC,CAAC;wDACjB,CAAC,CAAC,CAAC;wDAEH,GAAG,CAAC,SAAS,EAAE,CAAC;wDAChB,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAU;4DACvB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;4DAExD,CAAC;4DAAC,IAAI,CAAC,CAAC;gEAEJ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4DACzB,CAAC;4DACD,GAAG,CAAC,SAAS,EAAE,CAAC;wDACpB,CAAC,CAAC,CAAC;wDAEH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE;4DACV,KAAK,CAAC,WAAW,CAAC,CAAC;4DACnB,OAAO,CAAC,IAAI,CAAC,CAAC;wDAClB,CAAC,CAAC,CAAC;wDAEH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE;4DACZ,KAAK,CAAC,aAAa,CAAC,CAAC;wDACzB,CAAC,CAAC,CAAC;oDACP,CAAC,CAAC,CAAC;;;;yCACV,CAAC;yCAEE,sBAAsB,EAAtB,cAAsB;oCACtB,OAAO,CAAC,GAAG,CAAC;wCACR,OAAO,EAAE,EAAE;wCACX,MAAM,EAAE,MAAM;wCACd,GAAG,EAAE,QAAQ;qCAChB,CAAC;yCACG,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;yCACvB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;;;oCAItB,GAAG,SAA6B,CAAC;;;;oCAG3B,WAAM,cAAc,CAAC;4CACvB,OAAO,EAAE,EAAE;4CACX,MAAM,EAAE,MAAM;4CACd,uBAAuB,EAAE,IAAI;4CAC7B,GAAG,EAAE,QAAQ;yCAChB,CAAC,EAAA;;oCALF,GAAG,GAAG,SAKJ,CAAC;;;;oCAEH,OAAO,CAAC,KAAG,CAAC,CAAC;oCACb,WAAO;wCAGX,WAAM,OAAO,CAAC,GAAG,CAAC,EAAA;;oCAAlB,SAAkB,CAAC;;;;;yBAE1B,CAAC,EAAC;;;KACN;IAWM,0BAAW,GAAlB;QACI,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;IACL,CAAC;IAEM,2BAAY,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;IAC/B,CAAC;IAEM,yBAAU,GAAjB;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,uBAAQ,GAAf,UAAgB,SAAiB;QAC7B,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACxD,CAAC;IAEM,2BAAY,GAAnB,UAAoB,QAAqC;QAErD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC;QACX,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,SAAS;YACxC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAEY,iCAAkB,GAA/B,UAAgC,SAAiB;;;;;gBAI7C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAClD,MAAM,KAAC,OAAO,CAAC,MAAM,CAAC,uBAAuB,GAAG,SAAS,CAAC,EAAC;gBAC/D,CAAC;gBAEK,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAEtC,WAAO,IAAI,OAAO,CAAmB,UAAC,OAAO,EAAE,MAAM;wBAEjD,KAAI,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,UAAC,GAAQ,EAAE,MAA6B;4BACnE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,KAAK,CAAC,4BAA4B,CAAC,CAAC;gCACpC,KAAK,CAAC,GAAG,CAAC,CAAC;gCACX,MAAM,CAAC,GAAG,CAAC,CAAC;gCACZ,MAAM,CAAC;4BACX,CAAC;4BACD,IAAM,eAAe,GAAqB;gCACtC,MAAM,EAAE,KAAK,CAAC,gBAA0B;gCACxC,KAAK,EAAE;;wCACH,WAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAC;;qCAC7C;gCACD,MAAM,QAAA;6BACT,CAAC;4BACF,OAAO,CAAC,eAAe,CAAC,CAAC;wBAC7B,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,EAAC;;;KACN;IAEO,uBAAQ,GAAhB,UAAiB,KAAU;QACvB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;IACzC,CAAC;IACL,WAAC;AAAD,CAAC,AAzUD,CAA0B,SAAG,GAyU5B;AAzUY,oBAAI","sourcesContent":["import * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport * as yauzl from \"yauzl\";\n\nimport { isHTTP } from \"../http/UrlUtils\";\nimport { streamToBufferPromise } from \"../stream/BufferUtils\";\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\nimport { HttpZipReader } from \"./zip2RandomAccessReader_Http\";\n\nconst debug = debug_(\"r2:zip2\");\n\ninterface IStringKeyedObject { [key: string]: any; }\n\nexport class Zip2 extends Zip {\n\n    public static async loadPromise(filePath: string): Promise<IZip> {\n        if (isHTTP(filePath)) {\n            return Zip2.loadPromiseHTTP(filePath);\n        }\n\n        return new Promise<IZip>((resolve, reject) => {\n\n            yauzl.open(filePath, { lazyEntries: true, autoClose: false }, (err: any, zip: any) => {\n                if (err) {\n                    debug(\"yauzl init ERROR\");\n                    debug(err);\n                    reject(err);\n                    return;\n                }\n                const zip2 = new Zip2(filePath, zip);\n\n                zip.on(\"error\", (erro: any) => {\n                    debug(\"yauzl ERROR\");\n                    debug(erro);\n                    reject(erro);\n                });\n\n                zip.readEntry(); // next (lazyEntries)\n                zip.on(\"entry\", (entry: any) => {\n                    // if (/\\/$/.test(entry.fileName)) {\n                    if (entry.fileName[entry.fileName.length - 1] === \"/\") {\n                        // skip directories / folders\n                    } else {\n                        // debug(entry.fileName);\n                        zip2.addEntry(entry);\n                    }\n                    zip.readEntry(); // next (lazyEntries)\n                });\n\n                zip.on(\"end\", () => {\n                    debug(\"yauzl END\");\n                    resolve(zip2);\n                });\n\n                zip.on(\"close\", () => {\n                    debug(\"yauzl CLOSE\");\n                });\n            });\n        });\n    }\n\n    private static async loadPromiseHTTP(filePath: string): Promise<IZip> {\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n\n        return new Promise<IZip>(async (resolve, reject) => {\n\n            const failure = (err: any) => {\n                debug(err);\n                reject(err);\n            };\n\n            const success = async (res: request.RequestResponse) => {\n                if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {\n                    failure(\"HTTP CODE \" + res.statusCode);\n                    return;\n                }\n\n                debug(filePath);\n                debug(res.headers);\n\n                // if (!res.headers[\"content-type\"]\n                //     || res.headers[\"content-type\"] !== \"application/epub+zip\") {\n                //     reject(\"content-type not supported!\");\n                //     return;\n                // }\n\n                // TODO: if the HTTP server does not provide Content-Length,\n                // then fallback on download, but interrupt (req.abort())\n                // if response payload reaches the max limit\n                if (!res.headers[\"content-length\"]) {\n                    reject(\"content-length not supported!\");\n                    return;\n                }\n                const httpZipByteLength = parseInt(res.headers[\"content-length\"] as string, 10);\n                debug(`Content-Length: ${httpZipByteLength}`);\n\n                if (!res.headers[\"accept-ranges\"]\n                    || res.headers[\"accept-ranges\"] !== \"bytes\") {\n                    if (httpZipByteLength > (2 * 1024 * 1024)) {\n                        reject(\"accept-ranges not supported, file too big to download: \" + httpZipByteLength);\n                        return;\n                    }\n                    debug(\"Downloading: \" + filePath);\n\n                    const failure_ = (err: any) => {\n\n                        debug(err);\n                        reject(err);\n                    };\n\n                    const success_ = async (ress: request.RequestResponse) => {\n                        if (ress.statusCode && (ress.statusCode < 200 || ress.statusCode >= 300)) {\n                            failure_(\"HTTP CODE \" + ress.statusCode);\n                            return;\n                        }\n\n                        // debug(filePath);\n                        // debug(res.headers);\n                        let buffer: Buffer;\n                        try {\n                            buffer = await streamToBufferPromise(ress);\n                        } catch (err) {\n                            debug(err);\n                            reject(err);\n                            return;\n                        }\n\n                        yauzl.fromBuffer(buffer,\n                            { lazyEntries: true },\n                            (err: any, zip: any) => {\n                                if (err) {\n                                    debug(\"yauzl init ERROR\");\n                                    debug(err);\n                                    reject(err);\n                                    return;\n                                }\n                                const zip2 = new Zip2(filePath, zip);\n\n                                zip.on(\"error\", (erro: any) => {\n                                    debug(\"yauzl ERROR\");\n                                    debug(erro);\n                                    reject(erro);\n                                });\n\n                                zip.readEntry(); // next (lazyEntries)\n                                zip.on(\"entry\", (entry: any) => {\n                                    if (entry.fileName[entry.fileName.length - 1] === \"/\") {\n                                        // skip directories / folders\n                                    } else {\n                                        // debug(entry.fileName);\n                                        zip2.addEntry(entry);\n                                    }\n                                    zip.readEntry(); // next (lazyEntries)\n                                });\n\n                                zip.on(\"end\", () => {\n                                    debug(\"yauzl END\");\n                                    resolve(zip2);\n                                });\n\n                                zip.on(\"close\", () => {\n                                    debug(\"yauzl CLOSE\");\n                                });\n                            });\n                    };\n\n                    if (needsStreamingResponse) {\n                        request.get({\n                            headers: {},\n                            method: \"GET\",\n                            uri: filePath,\n                        })\n                            .on(\"response\", success_)\n                            .on(\"error\", failure_);\n                    } else {\n                        let ress: requestPromise.FullResponse;\n                        try {\n                            // tslint:disable-next-line:await-promise no-floating-promises\n                            ress = await requestPromise({\n                                headers: {},\n                                method: \"GET\",\n                                resolveWithFullResponse: true,\n                                uri: filePath,\n                            });\n                        } catch (err) {\n                            failure_(err);\n                            return;\n                        }\n\n                        await success_(ress);\n                    }\n\n                    return;\n                }\n\n                const httpZipReader = new HttpZipReader(filePath, httpZipByteLength);\n                yauzl.fromRandomAccessReader(httpZipReader, httpZipByteLength,\n                    { lazyEntries: true, autoClose: false },\n                    (err: any, zip: any) => {\n                        if (err) {\n                            debug(\"yauzl init ERROR\");\n                            debug(err);\n                            reject(err);\n                            return;\n                        }\n                        zip.httpZipReader = httpZipReader;\n                        const zip2 = new Zip2(filePath, zip);\n\n                        zip.on(\"error\", (erro: any) => {\n                            debug(\"yauzl ERROR\");\n                            debug(erro);\n                            reject(erro);\n                        });\n\n                        zip.readEntry(); // next (lazyEntries)\n                        zip.on(\"entry\", (entry: any) => {\n                            if (entry.fileName[entry.fileName.length - 1] === \"/\") {\n                                // skip directories / folders\n                            } else {\n                                // debug(entry.fileName);\n                                zip2.addEntry(entry);\n                            }\n                            zip.readEntry(); // next (lazyEntries)\n                        });\n\n                        zip.on(\"end\", () => {\n                            debug(\"yauzl END\");\n                            resolve(zip2);\n                        });\n\n                        zip.on(\"close\", () => {\n                            debug(\"yauzl CLOSE\");\n                        });\n                    });\n            };\n\n            if (needsStreamingResponse) {\n                request.get({\n                    headers: {},\n                    method: \"HEAD\",\n                    uri: filePath,\n                })\n                    .on(\"response\", success)\n                    .on(\"error\", failure);\n            } else {\n                // TODO: instead of a HEAD request, if not supported then\n                // GET with immediate req.abort() in the response callback\n                let res: requestPromise.FullResponse;\n                try {\n                    // tslint:disable-next-line:await-promise no-floating-promises\n                    res = await requestPromise({\n                        headers: {},\n                        method: \"HEAD\",\n                        resolveWithFullResponse: true,\n                        uri: filePath,\n                    });\n                } catch (err) {\n                    failure(err);\n                    return;\n                }\n\n                await success(res);\n            }\n        });\n    }\n\n    private entries: IStringKeyedObject;\n\n    private constructor(readonly filePath: string, readonly zip: any) {\n        super();\n\n        // see addEntry()\n        this.entries = {};\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: Zip2 -- \" + this.filePath);\n        if (this.zip) {\n            this.zip.close();\n        }\n    }\n\n    public entriesCount(): number {\n        return this.zip.entryCount;\n    }\n\n    public hasEntries(): boolean {\n        return this.entriesCount() > 0;\n    }\n\n    public hasEntry(entryPath: string): boolean {\n        return this.hasEntries() && this.entries[entryPath];\n    }\n\n    public forEachEntry(callback: (entryName: string) => void) {\n\n        if (!this.hasEntries()) {\n            return;\n        }\n\n        Object.keys(this.entries).forEach((entryName) => {\n            callback(entryName);\n        });\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            return Promise.reject(\"no such path in zip: \" + entryPath);\n        }\n\n        const entry = this.entries[entryPath];\n\n        return new Promise<IStreamAndLength>((resolve, reject) => {\n\n            this.zip.openReadStream(entry, (err: any, stream: NodeJS.ReadableStream) => {\n                if (err) {\n                    debug(\"yauzl openReadStream ERROR\");\n                    debug(err);\n                    reject(err);\n                    return;\n                }\n                const streamAndLength: IStreamAndLength = {\n                    length: entry.uncompressedSize as number,\n                    reset: async () => {\n                        return this.entryStreamPromise(entryPath);\n                    },\n                    stream,\n                };\n                resolve(streamAndLength);\n            });\n        });\n    }\n\n    private addEntry(entry: any) {\n        this.entries[entry.fileName] = entry;\n    }\n}\n"]}