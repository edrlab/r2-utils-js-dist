{"version":3,"file":"zip-ex.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip-ex.ts"],"names":[],"mappings":";;;AAAA,8BAAgC;AAChC,qCAAuC;AACvC,uBAAyB;AACzB,2BAA6B;AAE7B,6BAAoD;AAIpD,IAAM,KAAK,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAE5C;IAAiC,uCAAG;IAMhC,qBAA6B,OAAe;QAA5C,YACI,iBAAO,SACV;QAF4B,aAAO,GAAP,OAAO,CAAQ;;IAE5C,CAAC;IANmB,uBAAW,GAA/B,UAAgC,OAAe;;;gBAC3C,WAAO,OAAO,CAAC,OAAO,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC,EAAC;;;KACpD;IAMM,iCAAW,GAAlB;QACI,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAEM,kCAAY,GAAnB;QACI,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAEM,gCAAU,GAAjB;QACI,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,8BAAQ,GAAf,UAAgB,SAAiB;QAC7B,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;eACjB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEY,gCAAU,GAAvB;;;;gBAEI,WAAO,IAAI,OAAO,CAAW,UAAO,OAAO,EAAE,OAAO;;;;;oCAE1C,iBAAiB,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oCAEhC,WAAM,SAAS,CAAC,MAAM,EAAE;6CAG3C,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;6CAEnB,IAAI,EAAE,EAAA;;oCALL,KAAK,GAAa,SAKb;oCAEL,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;wCACjC,IAAM,kBAAkB,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;wCAEjD,IAAI,gBAAgB,GAAG,kBAAkB,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;wCACzE,KAAK,CAAC,gBAAgB,CAAC,CAAC;wCAGxB,EAAE,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4CACtC,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wCAClD,CAAC;wCAED,MAAM,CAAC,gBAAgB,CAAC;oCAC5B,CAAC,CAAC,CAAC;oCACH,OAAO,CAAC,aAAa,CAAC,CAAC;;;;yBAC1B,CAAC,EAAC;;;KACN;IAEY,wCAAkB,GAA/B,UAAgC,SAAiB;;;;;gBAI7C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAClD,MAAM,KAAC,OAAO,CAAC,MAAM,CAAC,gCAAgC,GAAG,SAAS,CAAC,EAAC;gBACxE,CAAC;gBAEK,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAE/B,eAAe,GAAqB;oBACtC,MAAM,EAAE,KAAK,CAAC,IAAI;oBAClB,KAAK,EAAE;;4BACH,WAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAC;;yBAC7C;oBACD,MAAM,EAAE,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;iBAC9D,CAAC;gBAEF,WAAO,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAC;;;KAC3C;IACL,kBAAC;AAAD,CAAC,AA9ED,CAAiC,SAAG,GA8EnC;AA9EY,kCAAW","sourcesContent":["import * as debug_ from \"debug\";\nimport * as filehound from \"filehound\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\n\n// import { bufferToStream } from \"../stream/BufferUtils\";\n\nconst debug = debug_(\"r2:utils#zip/zip-ex\");\n\nexport class ZipExploded extends Zip {\n\n    public static async loadPromise(dirPath: string): Promise<IZip> {\n        return Promise.resolve(new ZipExploded(dirPath));\n    }\n\n    private constructor(readonly dirPath: string) {\n        super();\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: ZipExploded -- \" + this.dirPath);\n    }\n\n    public entriesCount(): number {\n        return 0; // TODO: hacky! (not really needed ... but still)\n    }\n\n    public hasEntries(): boolean {\n        return true; // TODO: hacky\n    }\n\n    public hasEntry(entryPath: string): boolean {\n        return this.hasEntries()\n            && fs.existsSync(path.join(this.dirPath, entryPath));\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        return new Promise<string[]>(async (resolve, _reject) => {\n\n            const dirPathNormalized = fs.realpathSync(this.dirPath);\n\n            const files: string[] = await filehound.create()\n                // .discard(\"node_modules\")\n                // .depth(5)\n                .paths(this.dirPath)\n                // .ext([\".epub\", \".epub3\", \".cbz\"])\n                .find();\n\n            const adjustedFiles = files.map((file) => {\n                const filePathNormalized = fs.realpathSync(file);\n\n                let relativeFilePath = filePathNormalized.replace(dirPathNormalized, \"\");\n                debug(relativeFilePath);\n\n                // TODO: is this necessary?\n                if (relativeFilePath.indexOf(\"/\") === 0) {\n                    relativeFilePath = relativeFilePath.substr(1);\n                }\n\n                return relativeFilePath;\n            });\n            resolve(adjustedFiles);\n        });\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            return Promise.reject(\"no such path in zip exploded: \" + entryPath);\n        }\n\n        const fullPath = path.join(this.dirPath, entryPath);\n        const stats = fs.lstatSync(fullPath);\n\n        const streamAndLength: IStreamAndLength = {\n            length: stats.size,\n            reset: async () => {\n                return this.entryStreamPromise(entryPath);\n            },\n            stream: fs.createReadStream(fullPath, { autoClose: false }),\n        };\n\n        return Promise.resolve(streamAndLength);\n    }\n}\n"]}