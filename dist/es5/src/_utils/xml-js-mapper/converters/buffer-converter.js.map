{"version":3,"file":"buffer-converter.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/converters/buffer-converter.ts"],"names":[],"mappings":";;AAEA;IAAA;QACY,aAAQ,GAAW,MAAM,CAAC;IAuBtC,CAAC;IAjBU,mCAAS,GAAhB,UAAiB,QAAgB;QAI7B,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAEM,qCAAW,GAAlB,UAAmB,KAAa;QAI5B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvD,CAAC;IAEM,qDAA2B,GAAlC;QACI,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,sBAAC;AAAD,CAAC,AAxBD,IAwBC;AAxBY,0CAAe","sourcesContent":["import { IPropertyConverter } from \"./converter\";\n\nexport class BufferConverter implements IPropertyConverter {\n    private encoding: string = \"utf8\";\n\n    // constructor(encoding: string = \"json\") {\n    //     this.encoding = encoding;\n    // }\n\n    public serialize(property: Buffer): string {\n        // if (this.encoding === \"json\") {\n        //     return property.toJSON();\n        // }\n        return property.toString(this.encoding);\n    }\n\n    public deserialize(value: string): Buffer {\n        // if (this.encoding === \"json\") {\n        //     return Buffer.from((value as any).data);\n        // }\n        return Buffer.from(value as string, this.encoding);\n    }\n\n    public collapseArrayWithSingleItem(): boolean {\n        return false;\n    }\n}\n"]}