{"version":3,"file":"deserialize.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/methods/deserialize.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as xpath from \"xpath\";\n\nimport {\n    ObjectDefinition, getTypedInheritanceChain, objectDefinitions,\n} from \"../classes/object-definition\";\nimport { PropertyDefinition } from \"../classes/property-definition\";\nimport { propertyConverters } from \"../converters/converter\";\nimport { FunctionType, IDynamicObject, IParseOptions } from \"../types\";\n\nexport function deserialize(\n    objectInstance: Node,\n    objectType: FunctionType | undefined,\n    options: IParseOptions = { runConstructor: false }): any {\n\n    // if (objectInstance && objectInstance.constructor === Array) {\n    //     return (objectInstance as IXmlValueArray).map((o) => deserializeRootObject(o, objectType, options));\n    // }\n\n    return deserializeRootObject(objectInstance, objectType, options);\n}\n\nfunction deserializeRootObject(\n    objectInstance: Node,\n    objectType: FunctionType = Object,\n    options: IParseOptions): any {\n\n    // // tslint:disable-next-line:no-string-literal\n    // const debug = process.env[\"OPF_PARSE\"] === \"true\";\n\n    if (!objectDefinitions.has(objectType)) {\n        return undefined;\n    }\n\n    const [objectType2, ...superTypes] = getTypedInheritanceChain(objectType, objectInstance);\n\n    const output = Object.create(objectType2.prototype);\n\n    const definitions = [...superTypes.reverse(), objectType2]\n        .map((t) => objectDefinitions.get(t))\n        .filter((t) => !!t) as ObjectDefinition[];\n\n    definitions.forEach((d) => {\n        if (!d) {\n            return;\n        }\n\n        if (options.runConstructor) {\n            d.ctr.call(output);\n        }\n\n        d.beforeDeserialized.call(output);\n\n        // if (debug) {\n        //     console.log(\"======== PROPS: \" + objectInstance.localName);\n        // }\n\n        d.properties.forEach((p, key) => {\n            if (!p.objectType) {\n                throw new Error(`Cannot deserialize property \"${key}\" without type!`);\n            }\n\n            if (p.readonly) {\n                return;\n            }\n\n            // const namespaces: IXmlNamespaces = {};\n            // if (d.namespaces) {\n            //     for (const prop in d.namespaces) {\n            //         if (d.namespaces.hasOwnProperty(prop)) {\n            //             namespaces[prop] = d.namespaces[prop];\n            //         }\n            //     }\n            // }\n            // if (p.namespaces) {\n            //     for (const prop in p.namespaces) {\n            //         if (p.namespaces.hasOwnProperty(prop)) {\n            //             namespaces[prop] = p.namespaces[prop];\n            //         }\n            //     }\n            // }\n\n            // if (debug) {\n            //     console.log(`${p.xpathSelector}`);\n            // }\n\n            if (p.xpathSelectorParsed) {\n\n                const xpathMatched: Node[] = [];\n\n                let currentNodes = [objectInstance];\n\n                let index = -1;\n                for (const item of p.xpathSelectorParsed) {\n                    index++;\n\n                    const nextCurrentNodes: Node[] = [];\n\n                    for (const currentNode of currentNodes) {\n\n                        if (item.isText) {\n                            let textNode = currentNode.firstChild || currentNode; // fallback\n                            if (currentNode.childNodes && currentNode.childNodes.length) {\n                                const allTextNodes: Node[] = [];\n                                let atLeastOneElementChild = false;\n                                for (let i = 0; i < currentNode.childNodes.length; i++) {\n                                    const childNode = currentNode.childNodes.item(i);\n                                    if (childNode.nodeType === 3) { // TEXT_NODE\n                                        allTextNodes.push(childNode);\n                                        // textNode = childNode;\n                                        // break;\n                                    } else if (childNode.nodeType === 1) { // ELEMENT_NODE\n                                        atLeastOneElementChild = true;\n                                        break;\n                                    }\n                                }\n                                if (atLeastOneElementChild) {\n                                    // console.log(\"###################\");\n                                    // console.log(\"###################\");\n                                    // console.log(\"###################\");\n\n                                    let toStringed: string | undefined;\n                                    if ((currentNode as Element).innerHTML) {\n                                        console.log(\"innerHTML\");\n                                        toStringed = (currentNode as Element).innerHTML;\n                                    } else if (currentNode.childNodes.toString) {\n                                        // console.log(\"childNodes.toString\");\n                                        toStringed = currentNode.childNodes.toString();\n                                    } else {\n                                        console.log(\"childNodes.items.toString?\");\n                                        for (let i = 0; i < currentNode.childNodes.length; i++) {\n                                            const childNode = currentNode.childNodes.item(i);\n                                            if (childNode.toString) {\n                                                if (!toStringed) {\n                                                    toStringed = \"\";\n                                                }\n                                                toStringed += childNode.toString();\n                                            }\n                                        }\n                                    }\n\n                                    if (toStringed) {\n                                        // console.log(toStringed);\n\n                                        // textNode = document.createTextNode(toStringed);\n                                        // console.log(textNode.nodeType);\n                                        // console.log((textNode as Text).data);\n\n                                        const obj = { data: toStringed, nodeType: 3 };\n                                        // @ts-ignore:next-line\n                                        textNode = obj;\n\n                                        // textNode = new Node();\n                                        // (textNode as any).nodeType = 3;\n                                        // (textNode as Text).data = toStringed;\n                                    }\n                                } else if (allTextNodes.length) {\n                                    if (allTextNodes.length === 1) {\n                                        textNode = allTextNodes[0];\n                                    } else {\n                                        console.log(\"###################\");\n                                        console.log(\"###################\");\n                                        console.log(\"###################\");\n\n                                        console.log(\"XML text nodes: [\" + allTextNodes.length + \"]\");\n\n                                        let fullTxt = \"\";\n                                        allTextNodes.forEach((allTextNode) => {\n                                            fullTxt += (allTextNode as Text).data;\n                                        });\n\n                                        console.log(fullTxt);\n\n                                        // textNode = document.createTextNode(fullTxt);\n                                        // console.log(textNode.nodeType);\n                                        // console.log((textNode as Text).data);\n\n                                        const obj = { data: fullTxt, nodeType: 3 };\n                                        // @ts-ignore:next-line\n                                        textNode = obj;\n\n                                        // textNode = new Node();\n                                        // (textNode as any).nodeType = 3;\n                                        // (textNode as Text).data = fullTxt;\n                                    }\n                                }\n                            }\n                            if (textNode) {\n                                xpathMatched.push(textNode);\n                            }\n                        } else if (item.isAttribute) {\n                            if ((currentNode as Element).attributes) {\n\n                                const attr = item.namespaceUri ?\n                                    (currentNode as Element).attributes.getNamedItemNS(\n                                        item.namespaceUri, item.localName) :\n                                    (currentNode as Element).attributes.getNamedItem(item.localName);\n\n                                if (attr) {\n                                    xpathMatched.push(attr);\n                                }\n                            }\n                        } else {\n                            if (currentNode.childNodes && currentNode.childNodes.length) {\n                                for (let i = 0; i < currentNode.childNodes.length; i++) {\n                                    const childNode = currentNode.childNodes.item(i);\n                                    if (childNode.nodeType !== 1) { // ELEMENT_NODE\n                                        continue;\n                                    }\n                                    if ((childNode as Element).localName !== item.localName) {\n                                        continue;\n                                    }\n                                    if (item.namespaceUri && item.namespaceUri !== childNode.namespaceURI) {\n                                        continue;\n                                    }\n\n                                    nextCurrentNodes.push(childNode);\n                                }\n                            }\n                        }\n                    }\n\n                    currentNodes = nextCurrentNodes;\n\n                    if (index === p.xpathSelectorParsed.length - 1) {\n                        currentNodes.forEach((node) => {\n                            xpathMatched.push(node);\n                        });\n                    }\n                }\n\n                // // CHECKING ...\n                // const select = xpath.useNamespaces(p.namespaces || {});\n                // const xPathSelected = select(p.xpathSelector, objectInstance);\n                // if (xPathSelected && xPathSelected.length) {\n                //     const xpathMatchedCheck: Node[] = [];\n                //     if (!(xPathSelected instanceof Array)) {\n                //         xpathMatchedCheck.push(xPathSelected);\n                //     } else {\n                //         xPathSelected.forEach((item: Node) => {\n                //             // console.log(item.nodeValue || item.localName);\n                //             xpathMatchedCheck.push(item);\n                //         });\n                //     }\n                //     if (!xpathMatched || !xpathMatched.length) {\n                //         console.log(\"########################## XPATH NO MATCH 1 !!!!!!\");\n                //         console.log(p.xpathSelector);\n                //     } else if (xpathMatchedCheck.length !== xpathMatched.length) {\n                //         console.log(\"########################## XPATH NO MATCH 2 !!!!!!\");\n                //     } else {\n                //         xpathMatchedCheck.forEach((item: Node, index: number) => {\n                //             if (item !== xpathMatched[index]) {\n                //                 console.log(\"########################## XPATH NO MATCH 3 !!!!!!\");\n                //             }\n                //         });\n                //     }\n                // } else {\n                //     if (xpathMatched && xpathMatched.length) {\n                //         console.log(\"########################## XPATH NO MATCH 4 !!!!!!\");\n                //     }\n                // }\n\n                if (xpathMatched && xpathMatched.length) {\n\n                    if (p.array || p.set) {\n                        output[key] = []; // Array<IDynamicObject>();\n                        xpathMatched.forEach((item) => {\n                            output[key].push(deserializeObject(item, p, options));\n                        });\n\n                        if (p.set) {\n                            output[key] = new Set(output[key]);\n                        }\n                        return;\n                    }\n\n                    output[key] = deserializeObject(xpathMatched[0], p, options);\n                }\n            } else if (p.xpathSelector) {\n                // console.log(\"########### USING XPATH!\");\n                // console.log(`${p.xpathSelector}`);\n\n                // const timeBegin = process.hrtime();\n                // console.log(namespaces);\n                // console.log(p.xpathSelector);\n                const select = xpath.useNamespaces(p.namespaces || {});\n                const xPathSelected = select(p.xpathSelector, objectInstance) as Node[];\n\n                if (xPathSelected && xPathSelected.length) {\n\n                    // const timeElapsed = process.hrtime(timeBegin);\n                    // if (debug) {\n                    //     console.log(`=-------- ${timeElapsed[0]} seconds + ${timeElapsed[1]} nanoseconds`);\n                    // }\n                    // if (timeElapsed[0] > 1) {\n                    //     process.exit(1);\n                    // }\n\n                    const xpathMatched: Node[] = [];\n\n                    // console.log(\"XPATH MATCH: \" + p.xpathSelector\n                    //     + \" == \" + (xPathSelected instanceof Array)\n                    //     + \" -- \" + xPathSelected.length);\n\n                    if (!(xPathSelected instanceof Array)) {\n                        xpathMatched.push(xPathSelected);\n                    } else {\n                        xPathSelected.forEach((item: Node) => {\n                            // console.log(item.nodeValue || item.localName);\n                            xpathMatched.push(item);\n                        });\n                    }\n\n                    if (p.array || p.set) {\n                        output[key] = []; // Array<IDynamicObject>();\n                        xpathMatched.forEach((item) => {\n                            output[key].push(deserializeObject(item, p, options));\n                        });\n\n                        if (p.set) {\n                            output[key] = new Set(output[key]);\n                        }\n                        return;\n                    }\n\n                    output[key] = deserializeObject(xpathMatched[0], p, options);\n                }\n            }\n        });\n\n        d.onDeserialized.call(output);\n    });\n\n    return output;\n}\n\nfunction deserializeObject(\n    objectInstance: Node,\n    definition: PropertyDefinition,\n    _options: IParseOptions): IDynamicObject {\n\n    const primitive = definition.objectType === String\n        || definition.objectType === Boolean\n        || definition.objectType === Number;\n\n    const value: any =\n        // objectInstance.nodeValue;\n        objectInstance.nodeType === 3 ? // TEXT_NODE\n            (objectInstance as Text).data :\n            (objectInstance.nodeType === 2 ? // ATTRIBUTE_NODE\n                (objectInstance as Attr).value :\n                (objectInstance.nodeType === 1 ? // ELEMENT_NODE\n                    (objectInstance as Element).localName :\n                    objectInstance.nodeValue));\n\n    const converter = definition.converter || propertyConverters.get(definition.objectType);\n    if (converter) {\n        return converter.deserialize(value);\n    }\n\n    if (!primitive) {\n        const objDefinition = objectDefinitions.get(definition.objectType);\n\n        if (objDefinition) {\n            return deserialize(objectInstance, definition.objectType);\n        }\n    }\n\n    return value;\n}\n"]}