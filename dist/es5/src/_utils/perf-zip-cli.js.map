{"version":3,"file":"perf-zip-cli.js","sourceRoot":"","sources":["../../../../src/_utils/perf-zip-cli.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { Stream } from \"stream\";\n\n// ZIP 1\nimport StreamZip = require(\"node-stream-zip\");\n\n// ZIP 2\nimport * as yauzl from \"yauzl\";\n\n// ZIP 3\nimport * as unzipper from \"unzipper\";\n\n// import * as filehound from \"filehound\";\n\nconsole.log(\"process.cwd():\");\nconsole.log(process.cwd());\n\nconsole.log(\"__dirname:\");\nconsole.log(__dirname);\n\nconst args = process.argv.slice(2);\nconsole.log(\"args:\");\nconsole.log(args);\n\nif (!args[0]) {\n    console.log(\"FILEPATH ARGUMENT IS MISSING.\");\n    process.exit(1);\n}\nconst argPath = args[0].trim();\nlet filePath = argPath;\nconsole.log(filePath);\nif (!fs.existsSync(filePath)) {\n    filePath = path.join(__dirname, argPath);\n    console.log(filePath);\n    if (!fs.existsSync(filePath)) {\n        filePath = path.join(process.cwd(), argPath);\n        console.log(filePath);\n        if (!fs.existsSync(filePath)) {\n            console.log(\"FILEPATH DOES NOT EXIST.\");\n            process.exit(1);\n        }\n    }\n}\n\nconst stats = fs.lstatSync(filePath);\nif (!stats.isFile() && !stats.isDirectory()) {\n    console.log(\"FILEPATH MUST BE FILE OR DIRECTORY.\");\n    process.exit(1);\n}\n\nconst fileName = path.basename(filePath);\nconst ext = path.extname(fileName).toLowerCase();\n\nconst VERBOSE = process.env.DEBUG || false;\n\nconst argIterations = args[1] ? args[1].trim() : undefined;\nconst N_ITERATIONS = argIterations ? parseInt(argIterations, 10) : 5;\n\nconst argExtra = args[2] ? args[2].trim() : undefined;\nconst CHECK_ONLY_ZIP3 = argExtra === \"1\";\n\n// node-stream-zip\nconst zip1 = async (file: string): Promise<void> => {\n    return new Promise<void>((resolve, reject) => {\n\n        const zip = new StreamZip({\n            file,\n            storeEntries: true,\n        });\n\n        zip.on(\"error\", (err: any) => {\n            console.log(\"--ZIP error: \" + filePath);\n            console.log(err);\n\n            reject(err);\n        });\n\n        zip.on(\"entry\", (_entry: any) => {\n            // console.log(\"--ZIP: entry\");\n            // console.log(entry.name);\n        });\n\n        zip.on(\"extract\", (entry: any, f: any) => {\n            console.log(\"--ZIP extract:\");\n            console.log(entry.name);\n            console.log(f);\n        });\n\n        zip.on(\"ready\", async () => {\n            // console.log(\"--ZIP: ready\");\n            // console.log(zip.entriesCount);\n\n            const zipEntries = Object.values(zip.entries()) as any[];\n\n            if (VERBOSE) {\n                process.stdout.write(\"## 1 ##\\n\");\n            }\n            for (const zipEntry of zipEntries) {\n                if (zipEntry.isDirectory) {\n                    continue;\n                }\n                const promize = new Promise((res, rej) => {\n                    zip.stream(zipEntry.name, async (err: any, stream: Stream | undefined) => {\n                        if (err) {\n                            console.log(err);\n                            rej(err);\n                            return;\n                        }\n                        // stream.pipe(process.stdout);\n                        const totalBytes = streamReadAll(stream as NodeJS.ReadableStream);\n                        process.nextTick(() => {\n                            res(totalBytes);\n                        });\n                    });\n                });\n                const size = await promize;\n                if (zipEntry.size !== size) {\n                    console.log(`1 SIZE MISMATCH? ${zipEntry.name} ${zipEntry.size} != ${size}`);\n                }\n\n                if (VERBOSE) {\n                    process.stdout.write(` ${zipEntry.name} `);\n                } else {\n                    process.stdout.write(\".\");\n                }\n            }\n            process.stdout.write(\"\\n\");\n\n            process.nextTick(() => {\n                zip.close();\n                process.nextTick(() => {\n                    resolve();\n                });\n            });\n        });\n    });\n};\n(zip1 as any).zipName = \"node-stream-zip\";\n\n// yauzl\nconst zip2 = async (file: string): Promise<void> => {\n    return new Promise<void>((resolve, reject) => {\n        yauzl.open(file, { lazyEntries: true, autoClose: false }, (error, zip) => {\n            if (error || !zip) {\n                console.log(\"yauzl init ERROR\");\n                console.log(error);\n                reject(error);\n                return;\n            }\n\n            zip.on(\"error\", (erro) => {\n                console.log(\"yauzl ERROR\");\n                console.log(erro);\n                reject(erro);\n            });\n\n            if (VERBOSE) {\n                process.stdout.write(\"## 2 ##\\n\");\n            }\n\n            zip.readEntry(); // next (lazyEntries)\n            zip.on(\"entry\", async (zipEntry) => {\n                // if (/\\/$/.test(entry.fileName)) {\n                if (zipEntry.fileName[zipEntry.fileName.length - 1] === \"/\") {\n                    // skip directories / folders\n                } else {\n                    const promize = new Promise((res, rej) => {\n                        zip.openReadStream(zipEntry, (err, stream) => {\n                            if (err || !stream) {\n                                console.log(err);\n                                rej(err);\n                                return;\n                            }\n                            // stream.pipe(process.stdout);\n                            const totalBytes = streamReadAll(stream);\n                            process.nextTick(() => {\n                                res(totalBytes);\n                            });\n                        });\n                    });\n                    const size = await promize;\n                    if (zipEntry.uncompressedSize !== size) {\n                        // tslint:disable-next-line:max-line-length\n                        console.log(`2 SIZE MISMATCH? ${zipEntry.fileName} ${zipEntry.uncompressedSize} != ${size}`);\n                    }\n\n                    if (VERBOSE) {\n                        process.stdout.write(` ${zipEntry.fileName} `);\n                    } else {\n                        process.stdout.write(\".\");\n                    }\n                }\n\n                zip.readEntry(); // next (lazyEntries)\n            });\n\n            zip.on(\"end\", () => {\n                // console.log(\"yauzl END\");\n\n                process.stdout.write(\"\\n\");\n\n                process.nextTick(() => {\n                    zip.close(); // not autoClose\n                    process.nextTick(() => {\n                        resolve();\n                    });\n                });\n            });\n\n            zip.on(\"close\", () => {\n                // console.log(\"yauzl CLOSE\");\n            });\n        });\n    });\n};\n(zip2 as any).zipName = \"yauzl\";\n\n// <<< UNZIPPER_BUG\n// https://github.com/ZJONSSON/node-unzipper/issues/104\n// events.js:174\n// throw er; // Unhandled 'error' event\n// Error: EBADF: bad file descriptor, read\n// Emitted 'error' event at:\n// at lazyFs.read (internal/fs/streams.js:165:12)\n// at FSReqWrap.wrapper [as oncomplete] (fs.js:467:17)\n// const streams: any = {};\n// >>> UNZIPPER_BUG\n\n// unzipper\nconst zip3 = async (file: string): Promise<void> => {\n    return new Promise<void>(async (resolve, reject) => {\n        let zip: any;\n        try {\n            zip = await unzipper.Open.file(file);\n        } catch (err) {\n            console.log(err);\n            reject(err);\n            return;\n        }\n        if (VERBOSE) {\n            process.stdout.write(\"## 3 ##\\n\");\n        }\n        for (const zipEntry of zip.files) {\n            if (zipEntry.type === \"Directory\") {\n                continue;\n            }\n            const stream = zipEntry.stream();\n\n            // <<< UNZIPPER_BUG\n            stream.on(\"error\", (err: any) => {\n                console.log(\"err1\");\n                console.log(err);\n            });\n            // stream.__ZIP_FILE_PATH = file;\n            // stream.__ZIP_RESOURCE_PATH = zipEntry.path;\n            // if (!streams[file]) {\n            //     streams[file] = {};\n            // }\n            // streams[file][zipEntry.path] = stream; // prevents premature garbage collection\n\n            // // event sequence: FINISH, then END\n            // stream.on(\"end\", () => {\n            //     // console.log(`${zipEntry.path} END`);\n\n            //     process.nextTick(() => {\n            //         // console.log(`${stream.__ZIP_FILE_PATH} ${stream.__ZIP_RESOURCE_PATH} CLEAN`);\n            //         // streams[stream.__ZIP_FILE_PATH][stream.__ZIP_RESOURCE_PATH] = null;\n            //         delete streams[stream.__ZIP_FILE_PATH][stream.__ZIP_RESOURCE_PATH];\n            //     });\n\n            //     // setTimeout(() => {\n            //     //     return stream; // prevents premature garbage collection\n            //     // }, 200);\n            // });\n            // >>> UNZIPPER_BUG\n\n            const promize = streamReadAll(stream);\n            let size: number;\n            try {\n                size = await promize;\n            } catch (err) {\n                console.log(\"err2\");\n                console.log(err);\n                reject(err);\n                return;\n            }\n\n            if (zipEntry.uncompressedSize !== size) {\n                console.log(`3 SIZE MISMATCH? ${zipEntry.path} ${zipEntry.uncompressedSize} != ${size}`);\n            }\n\n            if (VERBOSE) {\n                process.stdout.write(` ${zipEntry.path} `);\n            } else {\n                process.stdout.write(\".\");\n            }\n        }\n        process.stdout.write(\"\\n\");\n\n        // <<< UNZIPPER_BUG\n        // process.nextTick(() => {\n        //     // streams[file] = null;\n        //     delete streams[file];\n        // });\n        // >>> UNZIPPER_BUG\n\n        resolve();\n    });\n};\n(zip3 as any).zipName = \"unzipper\";\n\nconst zips = CHECK_ONLY_ZIP3 ? [zip3] : [zip1, zip2, zip3];\n\nasync function processFile(file: string) {\n    console.log(`=====================================`);\n    console.log(`${file}`);\n    console.log(`=====================================`);\n\n    let winner = 0;\n    let minNanoOverall = Number.MAX_SAFE_INTEGER;\n\n    let iZip = 0;\n    for (const zip of zips) {\n        iZip++;\n\n        if (VERBOSE) {\n            console.log(`-------------------------------`);\n        }\n        for (let i = 0; i < N_ITERATIONS; i++) {\n            process.stdout.write(`${i + 1}/${N_ITERATIONS} `);\n\n            const time = process.hrtime();\n            await zip(file);\n            const diffTime = process.hrtime(time);\n\n            // await new Promise((res, _rej) => {\n            //     setTimeout(() => {\n            //         res();\n            //     }, 100);\n            // });\n\n            const nanos = diffTime[0] * 1e9 + diffTime[1];\n            (zip as any).minNano = nanos;\n            if (nanos < minNanoOverall) {\n                minNanoOverall = nanos;\n                winner = iZip;\n            }\n\n            if (VERBOSE) {\n                // tslint:disable-next-line:max-line-length\n                console.log(`Zip ${iZip}: ${diffTime[0]} seconds + ${diffTime[1]} nanoseconds`);\n            }\n        }\n    }\n\n    if (VERBOSE) {\n        console.log(`=====================================`);\n    }\n\n    iZip = 0;\n    for (const zip of zips) {\n        iZip++;\n        const won = iZip === winner;\n        // tslint:disable-next-line:max-line-length\n        console.log(`${won ? \">>\" : \"--\"} Zip ${iZip} (${(zip as any).zipName}) => ${(zip as any).minNano.toLocaleString()} nanoseconds ${won ? \" [ WINNER ]\" : `[ +${((zip as any).minNano - minNanoOverall).toLocaleString()} ]`}`);\n    }\n}\n\nif (stats.isDirectory()) {\n\n    // tslint:disable-next-line:no-floating-promises\n    (async () => {\n        // const files: string[] = await filehound.create()\n        //     .discard(\"node_modules\")\n        //     // .depth(5)\n        //     .paths(filePath)\n        //     .ext([\".zip\", \".epub\", \".cbz\"])\n        //     // .directory()\n        //     .find();\n        const files = fs.readdirSync(filePath, { withFileTypes: true }).\n            filter((f) => f.isFile() &&\n                /(\\.epub3?)|(\\.zip)|(\\.cbz)$/.test(f.name)).\n            map((f) => path.join(filePath, f.name));\n\n        for (const file of files) {\n            await processFile(file);\n        }\n    })();\n\n} else if (/\\.(zip|epub|cbz)$/.test(ext)) {\n    // tslint:disable-next-line:no-floating-promises\n    (async () => {\n        await processFile(filePath);\n    })();\n}\n\nasync function streamReadAll(readStream: NodeJS.ReadableStream): Promise<number> {\n\n    return new Promise<number>((resolve, reject) => {\n\n        let totalBytes = 0;\n\n        const cleanup = () => {\n            readStream.removeListener(\"data\", handleData);\n            readStream.removeListener(\"error\", handleError);\n            readStream.removeListener(\"end\", handleEnd);\n        };\n\n        const handleError = (err: any) => {\n            cleanup();\n            reject(err);\n        };\n        readStream.on(\"error\", handleError);\n\n        const handleData = (data: Buffer) => {\n            totalBytes += data.length;\n        };\n        readStream.on(\"data\", handleData);\n\n        const handleEnd = () => {\n            cleanup();\n            resolve(totalBytes);\n        };\n        readStream.on(\"end\", handleEnd);\n    });\n}\n"]}