{"version":3,"file":"JsonPropertyEx.js","sourceRoot":"","sources":["../../../../../src/_utils/ta-json/JsonPropertyEx.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAE1B,2BAA6B;AAE7B,8BAAgC;AAChC,mCAAuC;AACvC,uEAAkE;AAElE,IAAM,KAAK,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAE1C,iBAAiB,GAAQ;IAErB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EACxB,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAChF,CAAC;AAED,wBAA+B,YAAqB;IAEhD,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAExB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC5B,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAE1B,MAAM,CAAC,UAAC,MAAW,EAAE,GAAW;QAE5B,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,OAAO,CAAC,MAAM,CAAC,CAAC;QAEhB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEjB,OAAO,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC;QAC/D,IAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QACnE,OAAO,CAAC,UAAU,CAAC,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAE7B,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAClC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAE5B,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,IAAM,MAAM,GAAG,iCAAa,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACjD,OAAO,CAAC,MAAM,CAAC,CAAC;QAEhB,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACvC,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACzC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAElB,MAAM,CAAC,sBAAY,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACnD,CAAC,CAAC;AACN,CAAC;AAjCD,wCAiCC","sourcesContent":["import \"reflect-metadata\";\n\nimport * as util from \"util\";\n\nimport * as debug_ from \"debug\";\nimport { JsonProperty } from \"ta-json\";\nimport { getDefinition } from \"ta-json/classes/object-definition\";\n\nconst debug = debug_(\"r2:JsonPropertyEx\");\n\nfunction inspect(obj: any) {\n    // breakLength: 100  maxArrayLength: undefined\n    console.log(util.inspect(obj,\n        { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n}\n\nexport function JsonPropertyEx(propertyName?: string): (target: any, key: string) => void {\n\n    debug(\"JsonPropertyEx\");\n\n    console.log(\"propertyName\");\n    console.log(propertyName);\n\n    return (target: any, key: string): void => {\n\n        console.log(\"target\");\n        inspect(target);\n\n        console.log(\"key\");\n        console.log(key);\n\n        console.log(\"Reflect.getMetadata('design:type', target, key)\");\n        const objectType = Reflect.getMetadata(\"design:type\", target, key);\n        inspect(objectType);\n        console.log(objectType.name);\n\n        console.log(\"target.constructor\");\n        inspect(target.constructor);\n\n        console.log(\"getDefinition(target.constructor)\");\n        const objDef = getDefinition(target.constructor);\n        inspect(objDef);\n\n        console.log(\"objDef.getProperty(key)\");\n        const property = objDef.getProperty(key);\n        inspect(property);\n\n        return JsonProperty(propertyName)(target, key);\n    };\n}\n"]}