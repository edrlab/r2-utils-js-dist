{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/methods/serialize.ts"],"names":[],"mappings":"","sourcesContent":["// import { propertyConverters } from \"./../converters/converter\";\n\n// import { PropertyDefinition } from \"../classes/property-definition\";\n\n// import { FunctionType, IDynamicObject, XmlValue } from \"../types\";\n\n// import { getInheritanceChain, getTypedInheritanceChain, objectDefinitions, ObjectDefinition }\n// from \"../classes/object-definition\";\n\n// export function serialize(value: IDynamicObject | IDynamicObject[], objectType?: FunctionType): XmlValue {\n//     if (value.constructor === Array) {\n//         return (value as IDynamicObject[]).map((o) => serializeRootObject(o, objectType));\n//     }\n\n//     return serializeRootObject(value as IDynamicObject, objectType);\n// }\n\n// function serializeRootObject(\n//     objectInstance: IDynamicObject,\n//     objectType: FunctionType = Object.getPrototypeOf(objectInstance).constructor): XmlValue {\n//     const inheritanceChain = getTypedInheritanceChain(objectType);\n\n//     if (inheritanceChain.length === 0) {\n//         return objectInstance;\n//     }\n\n//     const definitions = inheritanceChain.map((t) => objectDefinitions.get(t))\n// .filter((t) => !!t) as ObjectDefinition[];\n\n//     const output: IDynamicObject = {};\n\n//     definitions.forEach((d) => {\n//         if (!d) {\n//             return;\n//         }\n\n//         d.properties.forEach((p, key) => {\n//             if (!p.objectType) {\n//                 throw new Error(`Cannot serialize property \"${key}\" without type!`);\n//             }\n\n//             const value = objectInstance[key];\n\n//             if ((value === null || value === undefined) || p.writeonly) {\n//                 return;\n//             }\n\n//             if (p.set) {\n//                 output[p.xpathSelector] = serializeArray(Array.from(value || []), p);\n//                 return;\n//             }\n\n//             if (p.array) {\n//                 output[p.xpathSelector] = serializeArray(value, p);\n//                 return;\n//             }\n\n//             output[p.xpathSelector] = serializeObject(value, p);\n//         });\n//     });\n\n//     return output;\n// }\n\n// function serializeArray(array: IDynamicObject[], definition: PropertyDefinition): XmlValue[] {\n//     return array.map((v) => serializeObject(v, definition));\n// }\n\n// function serializeObject(objectInstance: IDynamicObject, definition: PropertyDefinition): XmlValue {\n//     const primitive = definition.objectType === String\n//         || definition.objectType === Boolean\n//         || definition.objectType === Number;\n//     const value: any = objectInstance;\n\n//     const converter = definition.converter || propertyConverters.get(definition.objectType);\n//     if (converter) {\n//         return converter.serialize(value);\n//     }\n\n//     if (!primitive) {\n//         const objDefinition = objectDefinitions.get(definition.objectType);\n\n//         if (objDefinition) {\n//             if (value instanceof definition.objectType) {\n//                 return serialize(value);\n//             }\n//             return serialize(value, definition.objectType);\n//         }\n//     }\n\n//     return value;\n// }\n"]}