{"version":3,"file":"zip1.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip1.ts"],"names":[],"mappings":"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","sourcesContent":["import * as debug_ from \"debug\";\nimport * as StreamZip from \"node-stream-zip\";\n\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\n\n// import { bufferToStream } from \"../stream/BufferUtils\";\n\nconst debug = debug_(\"r2:zip1\");\n\nexport class Zip1 extends Zip {\n\n    public static async loadPromise(filePath: string): Promise<IZip> {\n\n        return new Promise<IZip>((resolve, reject) => {\n\n            const zip = new StreamZip({\n                file: filePath,\n                storeEntries: true,\n            });\n\n            zip.on(\"error\", (err: any) => {\n                debug(\"--ZIP error: \" + filePath);\n                debug(err);\n\n                reject(err);\n            });\n\n            zip.on(\"entry\", (_entry: any) => {\n                // console.log(\"--ZIP: entry\");\n                // debug(entry.name);\n            });\n\n            zip.on(\"extract\", (entry: any, file: any) => {\n                debug(\"--ZIP extract:\");\n                debug(entry.name);\n                debug(file);\n            });\n\n            zip.on(\"ready\", () => {\n                // console.log(\"--ZIP: ready\");\n                // console.log(zip.entriesCount);\n\n                // const entries = zip.entries();\n                // console.log(entries);\n\n                resolve(new Zip1(filePath, zip));\n            });\n        });\n    }\n\n    private constructor(readonly filePath: string, readonly zip: any) {\n        super();\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: Zip1 -- \" + this.filePath);\n        if (this.zip) {\n            this.zip.close();\n        }\n    }\n\n    public entriesCount(): number {\n        return this.zip.entriesCount;\n    }\n\n    public hasEntries(): boolean {\n        return this.entriesCount() > 0;\n    }\n\n    public hasEntry(entryPath: string): boolean {\n        return this.hasEntries()\n            && this.zip.entries()[entryPath];\n    }\n\n    public forEachEntry(callback: (entryName: string) => void) {\n\n        if (!this.hasEntries()) {\n            return;\n        }\n\n        Object.keys(this.zip.entries()).forEach((entryName) => {\n            callback(entryName);\n        });\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            return Promise.reject(\"no such path in zip: \" + entryPath);\n        }\n\n        // return new Promise<IStreamAndLength>((resolve, _reject) => {\n        //     const buffer: Buffer = this.zip.entryDataSync(entryPath);\n        //     const streamAndLength: IStreamAndLength = {\n        //         length: buffer.length,\n        //         stream: bufferToStream(buffer),\n        //     };\n        //     resolve(streamAndLength);\n        // });\n\n        return new Promise<IStreamAndLength>((resolve, reject) => {\n\n            this.zip.stream(entryPath, (err: any, stream: NodeJS.ReadableStream) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n\n                const entry = this.zip.entries()[entryPath];\n\n                const streamAndLength: IStreamAndLength = {\n                    length: entry.size,\n                    reset: async () => {\n                        return this.entryStreamPromise(entryPath);\n                    },\n                    stream,\n                };\n                resolve(streamAndLength);\n            });\n        });\n    }\n}\n"]}