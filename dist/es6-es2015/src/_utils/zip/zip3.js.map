{"version":3,"file":"zip3.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip3.ts"],"names":[],"mappings":";;;AAOA,gCAAgC;AAChC,mCAAmC;AACnC,qCAAqC;AAErC,+CAA0C;AAC1C,+BAAoD;AAEpD,MAAM,KAAK,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAI1C,UAAkB,SAAQ,SAAG;IA6CzB,YAA6B,QAAgB,EAAW,GAAQ;QAC5D,KAAK,EAAE,CAAC;QADiB,aAAQ,GAAR,QAAQ,CAAQ;QAAW,QAAG,GAAH,GAAG,CAAK;QAG5D,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;YACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAlDM,MAAM,CAAO,WAAW,CAAC,QAAgB;;YAC5C,IAAI,iBAAM,CAAC,QAAQ,CAAC,EAAE;gBAClB,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;aACzC;YAED,OAAO,IAAI,OAAO,CAAO,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC/C,IAAI,GAAQ,CAAC;gBACb,IAAI;oBACA,GAAG,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC5C;gBAAC,OAAO,GAAG,EAAE;oBACV,KAAK,CAAC,GAAG,CAAC,CAAC;oBACX,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,OAAO;iBACV;gBACD,KAAK,CAAC,GAAG,CAAC,CAAC;gBACX,OAAO,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;YACrC,CAAC,CAAA,CAAC,CAAC;QACP,CAAC;KAAA;IAEO,MAAM,CAAO,eAAe,CAAC,QAAgB;;YAEjD,OAAO,IAAI,OAAO,CAAO,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC/C,IAAI,GAAQ,CAAC;gBACb,IAAI;oBACA,GAAG,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EACrC;wBACI,OAAO,EAAE,EAAE;wBACX,MAAM,EAAE,KAAK;wBACb,GAAG,EAAE,QAAQ;wBACb,GAAG,EAAE,QAAQ;qBAChB,CAAC,CAAC;iBACV;gBAAC,OAAO,GAAG,EAAE;oBACV,KAAK,CAAC,GAAG,CAAC,CAAC;oBACX,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,OAAO;iBACV;gBACD,KAAK,CAAC,GAAG,CAAC,CAAC;gBACX,OAAO,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;YACrC,CAAC,CAAA,CAAC,CAAC;QACP,CAAC;KAAA;IAaM,WAAW;QACd,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,IAAI,CAAC,GAAG,EAAE;SAGb;IACL,CAAC;IAEM,YAAY;QACf,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC;IACjC,CAAC;IAEM,UAAU;QACb,OAAO,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,QAAQ,CAAC,SAAiB;QAC7B,OAAO,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACxD,CAAC;IAEY,UAAU;;YAEnB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;gBACpB,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aAC9B;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACtD,CAAC;KAAA;IAEY,kBAAkB,CAAC,SAAiB;;YAI7C,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gBACjD,OAAO,OAAO,CAAC,MAAM,CAAC,uBAAuB,GAAG,SAAS,CAAC,CAAC;aAC9D;YAED,OAAO,IAAI,OAAO,CAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;gBAEtD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBACtC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAEb,MAAM,MAAM,GAA0B,KAAK,CAAC,MAAM,EAAE,CAAC;gBACrD,MAAM,eAAe,GAAqB;oBACtC,MAAM,EAAE,KAAK,CAAC,IAAI;oBAClB,KAAK,EAAE,GAAS,EAAE;wBACd,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;oBAC9C,CAAC,CAAA;oBACD,MAAM;iBACT,CAAC;gBACF,OAAO,CAAC,eAAe,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;CACJ;AA1GD,oBA0GC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as unzipper from \"unzipper\";\n\nimport { isHTTP } from \"../http/UrlUtils\";\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\n\nconst debug = debug_(\"r2:utils#zip/zip3\");\n\ninterface IStringKeyedObject { [key: string]: any; }\n\nexport class Zip3 extends Zip {\n\n    public static async loadPromise(filePath: string): Promise<IZip> {\n        if (isHTTP(filePath)) {\n            return Zip3.loadPromiseHTTP(filePath);\n        }\n\n        return new Promise<IZip>(async (resolve, reject) => {\n            let zip: any;\n            try {\n                zip = await unzipper.Open.file(filePath);\n            } catch (err) {\n                debug(err);\n                reject(err);\n                return;\n            }\n            debug(zip);\n            resolve(new Zip3(filePath, zip));\n        });\n    }\n\n    private static async loadPromiseHTTP(filePath: string): Promise<IZip> {\n\n        return new Promise<IZip>(async (resolve, reject) => {\n            let zip: any;\n            try {\n                zip = await unzipper.Open.url(request.get,\n                    {\n                        headers: {},\n                        method: \"GET\",\n                        uri: filePath,\n                        url: filePath,\n                    });\n            } catch (err) {\n                debug(err);\n                reject(err);\n                return;\n            }\n            debug(zip);\n            resolve(new Zip3(filePath, zip));\n        });\n    }\n\n    private entries: IStringKeyedObject;\n\n    private constructor(readonly filePath: string, readonly zip: any) {\n        super();\n\n        this.entries = {};\n        this.zip.files.forEach((file: any) => {\n            this.entries[file.path] = file;\n        });\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: Zip3 -- \" + this.filePath);\n        if (this.zip) {\n            // TODO?\n            // this.zip.close();\n        }\n    }\n\n    public entriesCount(): number {\n        return this.zip.files.length;\n    }\n\n    public hasEntries(): boolean {\n        return this.entriesCount() > 0;\n    }\n\n    public hasEntry(entryPath: string): boolean {\n        return this.hasEntries() && this.entries[entryPath];\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        if (!this.hasEntries()) {\n            return Promise.resolve([]);\n        }\n        return Promise.resolve(Object.keys(this.entries));\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            return Promise.reject(\"no such path in zip: \" + entryPath);\n        }\n\n        return new Promise<IStreamAndLength>((resolve, _reject) => {\n\n            const entry = this.entries[entryPath];\n            debug(entry);\n\n            const stream: NodeJS.ReadableStream = entry.stream();\n            const streamAndLength: IStreamAndLength = {\n                length: entry.size,\n                reset: async () => {\n                    return this.entryStreamPromise(entryPath);\n                },\n                stream,\n            };\n            resolve(streamAndLength);\n        });\n    }\n}\n"]}